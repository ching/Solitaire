package forSolitaire;//Ching Yupublic class Deck {	//standard suits in a deck of cards	private static final String  SUITS[] 	        = {"Spades", "Hearts", "Diamonds", "Clubs"};		//standard ranks of cards in each suit	private static final String  RANKS[] 	     = {"Ace", "Two", "Three", "Four", "Five",  		"Six", "Seven", "Eight", "Nine", "Ten", 		"Jack", "Queen", "King"};		//values of cards for Solitaire	private static final int  VALUES[] 	          = {14,2,3,4,5,6,7,8,9,10,11,12,13};	//position of next card to be dealt	private int myNextCardPosition;		//reference to array of card with image references	private CardWithImage myCards[];	public Deck() {		//construct array of 52 card with image references		myCards = new CardWithImage[52];		// for loop that constructs the 52 		// cards of a standard deck       		for (int position = 0; position < 52; position++) {			//construct card with appropriate suit, rank, and value			myCards[position] = 				new CardWithImage(RANKS[position % 13], 						SUITS[position / 13],  						VALUES[position % 13]);		}// for loop				//set first card in deck as first to be dealt		myNextCardPosition = 0;	} // Deck constructor	public void setNextCard(int theNextCard) {		myNextCardPosition = theNextCard;	}//setNextCard method	private void swap (int firstPos, int otherPos) {		//used by shuffle: switch the cards in		//positions firstPos and otherPos in the deck.		CardWithImage hold = myCards[firstPos];		myCards[firstPos] = myCards[otherPos];		myCards[otherPos] = hold;	} //swap method	public void shuffle () {		for (int position=0; position<myCards.length; position++) {			int swapPosition = (int) (Math.random() * 52); 						swap( position, swapPosition );		}// for loop	}//shuffle method	public CardWithImage dealOne (boolean theFaceUp) {		// Make sure myNextCardPosition is valid before 		// trying to use it to index the deck		if (myNextCardPosition > -1 				&& myNextCardPosition < myCards.length) {			// set the face up appropriately			myCards[myNextCardPosition].setFaceUp(theFaceUp);			return myCards[ myNextCardPosition++];		}//if		System.out.println(				"Error: index of next card in deck is out of range.");		return null;	}//dealOne method		//returns number of cards left in deck	public int cardsLeft() { 		return 52 - myNextCardPosition;	}//cardsLeft method	}//Deck class